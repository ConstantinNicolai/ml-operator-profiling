/csghome/kx225/.conda/envs/constabass/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
done flag already set to true, for rerun reset to false
done flag already set to true, for rerun reset to false
done flag already set to true, for rerun reset to false
done flag already set to true, for rerun reset to false
done flag already set to true, for rerun reset to false
done flag already set to true, for rerun reset to false
done flag already set to true, for rerun reset to false
done flag already set to true, for rerun reset to false
done flag already set to true, for rerun reset to false
done flag already set to true, for rerun reset to false
Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (32, 3, 32, 32) 0.00010026366376012404 15.205876935737354 0.00625640932324466 0.41173032493586015 423620 42.473693242063746 151.65889979959917 4.064376133433447 1610.3783968792645 43.60430006233227 0.0001253906803267079 2025-01-15_16-59-09 2025-01-15_17-00-52 3.8774794007485024e-07 0.0004118918906693243 4.004103369669026e-07 38.46405780803407 1.9642743617411647 34.77685611299239 93.38386765888977 4.768043456990388 1082.532442949311 55.28253763684334
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (32, 64, 16, 16) 9.413660265235388e-05 10.515867241593229 0.006196088465025739 0.0751748142191765 390710 36.78011202230118 111.70859097633137 0.7169291967602085 821.7308979925782 5.874310332714891 0.00011262573264057741 2025-01-15_17-00-53 2025-01-15_17-02-32 2.9642022103185306e-07 0.00047277167414032346 1.2418743130343675e-06 35.37812454022997 1.3661384579722635 39.04621256724931 74.83131176283074 2.8829434280838098 973.9597685925311 37.60979174797641
ReLU(inplace=True)
Traceback (most recent call last):
  File "/csghome/kx225/ml-operator-profiling/functional_general_benchmark/general_pipeline_block2_backprop.py", line 267, in <module>
    output.backward(gradient)
  File "/csghome/kx225/.conda/envs/constabass/lib/python3.9/site-packages/torch/_tensor.py", line 521, in backward
    torch.autograd.backward(
  File "/csghome/kx225/.conda/envs/constabass/lib/python3.9/site-packages/torch/autograd/__init__.py", line 289, in backward
    _engine_run_backward(
  File "/csghome/kx225/.conda/envs/constabass/lib/python3.9/site-packages/torch/autograd/graph.py", line 768, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: Trying to backward through the graph a second time (or directly access saved tensors after they have already been freed). Saved intermediate values of the graph are freed when you call .backward() or autograd.grad(). Specify retain_graph=True if you need to backward through the graph a second time or if you need to access saved tensors after calling backward.
